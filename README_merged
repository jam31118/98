<<<DESCRIPTION>>>
VERY IMPORTANT(!!!): We are very sorry to write README file in English. Github doesn't have Korean language support.

<Problem 1>
To execute the same file for 10000 times, use .sh file with the following code.
Problem1 code receives 2 arguments (to use argc & argv[]). Each argument means sleep time. 
First argument is ch1(increment process) sleep time, and second argument is ch2(decrement process) sleep time.
In this shell-file code case, delay time of ch1_process is always 0ms, and delay time of ch2_process is 0, 10, 20, ..., 100ms.

The following explanation is the process of this shell-file. -------(***)
(Precondition: ch1 sleep time is always 0)
(1). Set the ch2 delay time as 0ms, and execute problem1.exe with these arguments for 1000 times.
(2). After (1), reset the ch2 delay time as 10ms, and doing (1) again.
...
(10). After (9), reset the ch2 delay time as 90ms, and doing (1) again.
if you want to change ch1 sleep time, modify shell-file code.

(Examples)
./problem1 10 20 -> execute problem1.exe just 1 time with 'ch1 delay time = 10ms' and 'ch2 delay time = 20'.
./problem1.sh -> execute problem1.exe like (*).


the following code is problem1 shell-file code.
------------------------------------
#!/bin/bash
PROGRAM=./problem1

for i in {0..100..10} 
	# Changing Delay time of process 1
	# relative to process 2
do
	echo "The delay is $i"
	for j in {1..1000} 
		# Repeat with same delay time setting
		# in order to find the race condition case
	do
		RESULT1=$($PROGRAM 0 $i)
		if [ $RESULT1 != 0 ]
		then
			echo $RESULT1
		fi
	done
done
------------------------------------


As you know if you read the code, the shared variable's value (= *X) (RMK: X is pointer) will be printed if *X != 0 (i.e. race condition is occurred).
If not, *X value will not be printed.
This is the result. Race condition is occurred.
------------------------------------
The delay is 0
10
The delay is 10
10
The delay is 20
10
10
-10
-10
10
The delay is 30
The delay is 40
10
-10
The delay is 50
-10
The delay is 60
The delay is 70
The delay is 80
-10
The delay is 90
The delay is 100
------------------------------------





<Problem 2>
It is similar to <Problem 1> description.
-----------------------------------------
#!/bin/bash
PROGRAM=./problem2

for i in {0..100..10} 
	# Changing Delay time of process 1
	# relative to process 2
do
	echo "The delay is $i"
	for j in {1..1000} 
		# Repeat with same delay time setting
		# in order to find the race condition case
	do
		RESULT=$($PROGRAM 0 $i)
		if [ $RESULT != 0 ]
		then
			echo $RESULT
		fi
	done
done
-----------------------------------------


This is the result. As you see, there is no race condition.
-----------------------------------------
The delay is 0
The delay is 10
The delay is 20
The delay is 30
The delay is 40
The delay is 50
The delay is 60
The delay is 70
The delay is 80
The delay is 90
The delay is 100
-----------------------------------------





<Problem 3>

## Shared Variable Description

The declarations of shared variables can be found 
in the source file "prob3/problem3.c" as the following:

==============================
typedef struct sh_data {
	int buffer[BUFSIZE];
	int SUM;
	int *write_ptr, *read_ptr;
	int write_idx, read_idx;
	int m, n;
	int consumer_end_flag;
} sh_data_t;
==============================

where 
- 'buffer' is and buffer array with length 20
- 'SUM' is summation result generated by consumers processes
- 'write_ptr' is a pointer for an element in buffer into which 
  the current producer in its critical section put what it'd produced
- 'read_ptr' is a pointer for an element in buffer from which 
  the current consumer in its critical section 
  read the produced datum and put zero instead
- 'write_idx' is an integer for counting 
  how many data had been put into buffer by producers
- 'read_idx' is an interger for counting 
  how many data had been read out from buffer by consumers
- 'm' and 'n' are the number of producers and consumers, respectively
- 'consumer_end_flag' is an integer(or boolean, precisely) indicating 
  if all the conditions that should be met for terminating all consumers


## Execution Result Samples
NOTE: The result given below is just the value of shared variable 'SUM'. 
The full output including some instructive messages are given as separate file 
'problem3.result.m2n7.log' in a 'src/prob3/withlog' directory under tar arhive root.

(a) m = 1, n = 1
 $ ./problem3 1 1
 1275

(b) m = 1, n = 2
 $ ./problem3 1 2
 1275

(c) m = 2, n = 1
 $ ./problem3 2 1
 2550

(d) m = 2, n = 2
 $ ./problem3 2 2
 2550

(e) m = 5, n = 7
 $ ./problem3 5 7
 6375

(f) m = 100, n = 1000
 $ ./problem3 100 1000
 127500

(g) m = 1, n = 1000
 $ ./problem3 1 1000
 1275

(h) m = 1, n = 10000
 $ ./problem3 1 10000
 1275

