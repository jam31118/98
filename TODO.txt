- How about forking recursively? How do those children processes behave?
- let's 'shm_unlink'
- check all the error return values!
- utilize both stdout and stderr

- shared memory should be in #define so that it can be accessed by any code segments
- the shm should be opened in each processes!
- all shm and sem should be opened and also closed in each processes!

- why do we ftruncate()?

170531
- 1m1n was done
- should do mmnn which is equivalent to problem 3.
- should practice for just mulpiprocess handleing, without any other code
  e.g. generate 10 processes with each of them printing only once their PID (by getpid())
  and exit them properly

- Let's try this in 'multiProcess.c'
  ==> https://stackoverflow.com/questions/876605/multiple-child-process
- upgrade 1m1n to 2m1n, 1m2n, 2m2n, and mmnn
- I think we don't have to use if-else tree .. .. or not. ah,
  instead, we can use two parellel loop: one for consumer, the other for producer
  last loop for both waiting..

- Does multiple shm_open with each read/write authorities a problem?
- What's the difference between 1m1n script and "mmnn 1 1"? should be same!

- put the contents of sh_data_p per problems!

- idea.. if one of the consumers reach to the ending condition, 
  then it should help other consumers to terminate by letting them
  enter to .. // but the break should be done after posting sem. 
  - the global flag should be determined in the critical in consumers, 
    i.e. before the mutex.
  - so.. first,, the global end flag is set
  - and, the first consumer post_sem 
  - and, every consumer should check the end flag right after the mutex
    i.e. the very first part of the critical section!


- Does producer end??

- two possible case
 - assuming producer ends separatly..
  - one consumer is right before mutex, other is before full
  - all consumers 

